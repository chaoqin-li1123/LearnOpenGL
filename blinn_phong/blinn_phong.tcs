#version 450 core

layout (vertices = 3) out;

in VS_OUT
{
    in vec3 vertex_position_camera_space;
    in vec2 uv;
    in vec3 normal_camera_space;
} tcs_in[];

in float view_distance[];

out TCS_OUT
{
    out vec3 vertex_position_camera_space;
    out vec2 uv;
    out vec3 normal_camera_space;
} tcs_out[];

void pass_data() {
    tcs_out[gl_InvocationID].vertex_position_camera_space = tcs_in[gl_InvocationID].vertex_position_camera_space;
    tcs_out[gl_InvocationID].uv = tcs_in[gl_InvocationID].uv;
    tcs_out[gl_InvocationID].normal_camera_space = tcs_in[gl_InvocationID].normal_camera_space;
}

void main() {
    float tessellation_level = clamp(10.0 / view_distance[gl_InvocationID], 1.0, 5.0);
    if (gl_InvocationID == 0) {
        gl_TessLevelInner[0]  = 1.0;
        for (int i = 0; i < 3; i++) {
            gl_TessLevelOuter[i] = 1.0;
        }       
    }
    gl_TessLevelInner[0]  = max(tessellation_level, gl_TessLevelInner[0]);
    for (int i = 0; i < 3; i++) {
        gl_TessLevelOuter[i] = max(tessellation_level, gl_TessLevelOuter[i]);
    }
    gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;    
    pass_data();
}

